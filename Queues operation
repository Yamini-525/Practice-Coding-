////////////////////////////////////////////////using arrays////////////////////////////////////////////
import java.util.*;
public class Queue {
    static int rear = 0;
    static int front = 0;
    static int n = 10; 
    static int queue[] = new int[n];
    
    public static void enqueue(int data) {
        if(rear == n-1) 
        {  
            System.out.println("Overflow condition");
        } else {
            queue[rear] = data;
            rear++;
        }
    }
    
    public static void dequeue() {
        if(front == rear) {
            System.out.println("Queue is empty");
        } else {
            System.out.println("Dequeued: " + queue[front++]);
            if(front == rear) {
                front = 0;
                rear = 0;
            }
        }
    }
 
    public static void printQueue() {
        if (front == rear) {
            System.out.println("Queue is empty");
        } else {
            System.out.print("Queue elements: ");
            for (int i = front; i < rear; i++) {
                System.out.print(queue[i] + " ");
            }
            System.out.println();
        }
    }
    
    public static void main(String args[]) {
        enqueue(10);
        enqueue(20);
        enqueue(30);
        enqueue(40);
        printQueue();
        dequeue();
        printQueue(); 
    }
}






////////////////////////////using linked listss/////////////////////////
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class ListNode {
    int data;
    ListNode next;
    public ListNode(int data)
    {
        this.data=data;
        this.next=null;
    }
}
    class Queue{
       ListNode front;
        ListNode rear;
        void enqueue(int data)
        {
            ListNode newnode=new ListNode(data);
            
                if(rear==null)
                {
                    front=rear=newnode;
                }
                else
                {
                  
                    rear.next=newnode;
                    rear=newnode;
                }
            
        }
        void dequeue()
        {
            if(front==rear)
            {
                System.out.println("queue is empty");
            }
            else
            {
                ListNode temp=front;
                if(front==null)
                {
                   rear=null;
                }
                front=front.next;
                temp.next=null;
                
            }
            
        }
        void display()
        {
            ListNode current=front;
            while(current!=null)
            {
                System.out.println(current.data+" ");
                current=current.next;
            }
        }
    }

    public class Main{
    public static void main(String[] args) {
      Queue q1=new Queue();
      q1.enqueue(10);
      q1.enqueue(20);
      q1.enqueue(30);
      q1.enqueue(40);
      q1.display();
      q1.dequeue();
      q1.display();
      
    }
    }
